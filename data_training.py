
import os
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ===
TARGET = "STOCKS"
SOURCE_DIR = os.path.join("data_yf", TARGET)
TARGET_DIR = os.path.join("data_training", TARGET)
os.makedirs(TARGET_DIR, exist_ok=True)


def process_data(df, window_size=60):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:
    - –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫ float
    - –£–¥–∞–ª–µ–Ω–∏–µ NaN
    - –°–æ–∑–¥–∞–Ω–∏–µ X_train, y_train
    - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è StandardScaler –Ω–∞ –∫–∞–∂–¥–æ–º –æ–∫–Ω–µ
    """

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –í–°–ï —Å—Ç–æ–ª–±—Ü—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    for col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    df = df.dropna().reset_index(drop=True)

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
    df = df[numeric_cols]

    if df.shape[1] == 0:
        raise ValueError("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

    X_train, y_train = [], []

    for i in range(len(df) - window_size):
        window = df.iloc[i:i + window_size].values
        target = df.iloc[i + window_size].values

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ–∫–Ω—É
        scaler = StandardScaler()
        window_scaled = scaler.fit_transform(window)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ —Ç–µ–º –∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º
        target_scaled = (target - scaler.mean_) / scaler.scale_

        X_train.append(window_scaled)
        y_train.append(target_scaled)

    X_train = np.array(X_train)
    y_train = np.array(y_train)

    return X_train, y_train


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
for filename in os.listdir(SOURCE_DIR):
    if filename.endswith(".csv"):
        filepath = os.path.join(SOURCE_DIR, filename)
        coin_name = os.path.splitext(filename)[0]

        # —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
        output_dir = os.path.join(TARGET_DIR, coin_name)
        os.makedirs(output_dir, exist_ok=True)

        # –ª–æ–≥-—Ñ–∞–π–ª
        log_path = os.path.join(output_dir, "log.txt")
        with open(log_path, "a") as log:
            log.write(f"\n==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename} ====\n")
            log.write(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}\n")

            try:
                df = pd.read_csv(filepath,skiprows=2)
                df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
                df = df.dropna(subset=["Date"])
                df = df.sort_values("Date").reset_index(drop=True)



                log.write(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –†–∞–∑–º–µ—Ä: {df.shape}\n")
                log.write(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}\n")


                X_train, y_train = process_data(df.drop(columns=["Date"]), window_size=60)
                print(X_train, y_train)

                # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .npy ===
                np.save(os.path.join(output_dir, "x_train.npy"), X_train)
                np.save(os.path.join(output_dir, "y_train.npy"), y_train)

                log.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n")
                log.write(f"   X_train: {X_train.shape}\n")
                log.write(f"   y_train: {y_train.shape}\n")
                log.write(f"   –ü—É—Ç—å: {output_dir}\n")

            except Exception as e:
                log.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n")

print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")















